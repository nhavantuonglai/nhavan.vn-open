---
const sections = [
	{
		title: 'Thư viện ảnh số',
		dataUrl: 'https://raw.githubusercontent.com/nhavantuonglai/analytics/main/datanow/thu-vien-anh-so.txt',
		sectionId: 'digital-gallery',
	},
	{
		title: 'Thư viện ảnh film',
		dataUrl: 'https://raw.githubusercontent.com/nhavantuonglai/analytics/main/datanow/thu-vien-anh-film.txt',
		sectionId: 'film-gallery',
	},
];

const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

const generateUniqueRandomNumbers = (count, min, max) => {
	const numbers = new Set();
	while (numbers.size < count) {
		numbers.add(getRandomInt(min, max));
	}
	return Array.from(numbers);
};

async function fetchImageUrls(url) {
	try {
		const response = await fetch(url);
		const text = await response.text();
		return text.split('\n').filter(url => url.trim());
	} catch {
		return [];
	}
}

const createSeasonData = (indices, imageUrls) =>
	indices.map(index => ({
		src: imageUrls[index] || '',
		alt: `Văn hay trong hiện tại, chữ tốt ở tương lai ${index + 1}.`
	}));

const shuffleArray = (array) => {
	const shuffled = [...array];
	for (let i = shuffled.length - 1; i > 0; i--) {
		const j = Math.floor(Math.random() * (i + 1));
		[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
	}
	return shuffled;
};

const sectionData = await Promise.all(sections.map(async section => {
	const imageUrls = await fetchImageUrls(section.dataUrl);
	const totalUrls = imageUrls.length;
	const uniqueIndices = totalUrls > 0 ? generateUniqueRandomNumbers(16, 0, totalUrls - 1) : [];
	return {
		sectionId: section.sectionId,
		title: section.title,
		seasons: {
			springs: shuffleArray(createSeasonData(uniqueIndices.slice(0, 4), imageUrls)),
			summers: shuffleArray(createSeasonData(uniqueIndices.slice(4, 8), imageUrls)),
			autumns: shuffleArray(createSeasonData(uniqueIndices.slice(8, 12), imageUrls)),
			winters: shuffleArray(createSeasonData(uniqueIndices.slice(12, 16), imageUrls)),
		},
	};
}));
---

{sectionData.map(section => (
	<div class="mb-6 md:mb-62">

		<h2 class="px-4 sm:px-6">{section.title}</h2>

		<section class="relative not-prose w-full h-screen" data-section-id={section.sectionId} data-url={section.dataUrl}>
			<div class="absolute inset-0">
				<div class="gallery-container absolute inset-0 px-4 sm:px-6">

					{Object.entries(section.seasons).map(([season, images], index) => (
						<div class={`gallery-row ${index % 2 === 0 ? 'left-to-right' : 'right-to-left'}`}>
							<div class="gallery-track">

								{images.map(image => image.src && (
									<div class="gallery-item">
										<img src={image.src} title={image.alt} alt={image.alt} class="rounded-lg" width="300" height="200" />
									</div>
								))}

								{images.map(image => image.src && (
									<div class="gallery-item">
										<img src={image.src} title={image.alt} alt={image.alt} class="rounded-lg" width="300" height="200" />
									</div>
								))}

							</div>
						</div>
					))}

				</div>
			</div>
		</section>

	</div>
))}

<style>

	.gallery-container {
		width: 100%;
		height: 100%;
		overflow: hidden;
		display: flex;
		flex-direction: column;
		gap: 10px;
	}

	.gallery-row {
		overflow: hidden;
		position: relative;
		width: 100%;
		height: 25%;
	}

	.gallery-track {
		display: flex;
		gap: 10px;
		width: max-content;
		height: 100%;
	}

	.gallery-item {
		flex: 0 0 auto;
		width: 300px;
		height: 100%;
	}

	.gallery-item img {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.left-to-right .gallery-track {
		animation: scroll-left 120s linear infinite;
	}

	.right-to-left .gallery-track {
		animation: scroll-right 120s linear infinite;
		transform: translateX(calc(-100% + 100vw));
	}

	@keyframes scroll-left {
		0% { transform: translateX(0); }
		100% { transform: translateX(calc(-100% / 2)); }
	}

	@keyframes scroll-right {
		0% { transform: translateX(calc(-100% + 100vw)); }
		100% { transform: translateX(calc(-50% + 100vw)); }
	}

</style>