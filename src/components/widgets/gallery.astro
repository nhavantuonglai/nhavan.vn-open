---
export interface Props {
	id?: string;
	showImages?: boolean;
}

const {
	id = "hero-gallery",
	showImages = false
} = Astro.props;

let springs = [];
let summers = [];
let autumns = [];
let winters = [];

if (showImages) {
	const sections = [
		{
			title: 'Diễn đàn viết lách nhà văn tương lai.',
			dataUrl: 'https://data.nhavantuonglai.com/thu-vien-anh-nen.txt',
			sectionId: 'film-gallery',
		},
	];

	const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

	const generateUniqueRandomNumbers = (count, min, max) => {
		const numbers = new Set();
		while (numbers.size < count) {
			numbers.add(getRandomInt(min, max));
		}
		return Array.from(numbers);
	};

	async function fetchImageUrls(url) {
		try {
			const response = await fetch(url);
			const text = await response.text();
			return text.split('\n').filter(url => url.trim());
		} catch {
			return [];
		}
	}

	const createSeasonData = (indices, imageUrls) =>
		indices.map(index => ({
			src: imageUrls[index] || '',
			alt: `Diễn đàn viết lách nhà văn tương lai ${index + 1}.`
		}));

	const shuffleArray = (array) => {
		const shuffled = [...array];
		for (let i = shuffled.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			[shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
		}
		return shuffled;
	};

	const firstSection = sections[0];
	const imageUrls = await fetchImageUrls(firstSection.dataUrl);
	const totalUrls = imageUrls.length;
	const uniqueIndices = totalUrls > 0 ? generateUniqueRandomNumbers(16, 0, totalUrls - 1) : [];

	springs = shuffleArray(createSeasonData(uniqueIndices.slice(0, 4), imageUrls));
	summers = shuffleArray(createSeasonData(uniqueIndices.slice(4, 8), imageUrls));
	autumns = shuffleArray(createSeasonData(uniqueIndices.slice(8, 12), imageUrls));
	winters = shuffleArray(createSeasonData(uniqueIndices.slice(12, 16), imageUrls));
}

// Helper component to avoid duplicate code
// Create gallery data structure for cleaner rendering
const allSeasons = [
	{ images: springs, direction: 'left-to-right', name: 'spring' },
	{ images: summers, direction: 'right-to-left', name: 'summer' },
	{ images: autumns, direction: 'left-to-right', name: 'autumn' },
	{ images: winters, direction: 'right-to-left', name: 'winter' }
];
---

<section id={id} class="gallery-section">

	<div class="gallery-background">

		{showImages && (
			<div class="gallery-container" id="gallery-images">

				{allSeasons.map((season, index) => (
					<div class={`gallery-row ${season.direction} season-${index + 1}`}>
						<div class="gallery-track">
							{season.images.map((image) => image.src && (
								<div class="gallery-item">
									<img src={image.src} alt={image.alt} class="gallery-image" width="300" height="200" loading="lazy" />
								</div>
							))}
						</div>
					</div>
				))}

			</div>
		)}

		<div class="overlay-container">
			<div class="overlay-content">
				<div class="blur-section"></div>
				<div class="clear-section"></div>
			</div>
		</div>

		<div class="slot-container">
			<slot/>
		</div>

	</div>

</section>

{showImages && (

	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const galleryContainer = document.getElementById('gallery-images');
			if (galleryContainer) {
				// Delay animation start for better performance
				const animationDelay = 500;
				
				setTimeout(() => {
					const animations = galleryContainer.querySelectorAll('.gallery-track');
					animations.forEach(track => {
						track.style.animationPlayState = 'running';
					});
				}, animationDelay);
			}
		});
	</script>

)}

<style>
	/* Main container styles */
	.gallery-section {
		position: relative;
		width: 100%;
		height: 100vh;
		margin-bottom: 1.5rem;
		overflow: hidden;
	}

	.gallery-background {
		position: absolute;
		inset: 0;
		z-index: 0;
	}

	/* Gallery container and layout */
	.gallery-container {
		position: absolute;
		inset: 0;
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
		gap: 10px;
		overflow: hidden;
	}

	.gallery-row {
		position: relative;
		width: 100%;
		height: 25%;
		overflow: hidden;
	}

	.gallery-track {
		display: flex;
		gap: 10px;
		width: max-content;
		height: 100%;
		animation-play-state: paused;
	}

	.gallery-item {
		flex: 0 0 auto;
		width: 300px;
		height: 100%;
	}

	.gallery-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		border-radius: 0.5rem;
	}

	/* Animation styles */
	.left-to-right .gallery-track {
		animation: scroll-left 120s linear infinite;
	}

	.right-to-left .gallery-track {
		animation: scroll-right 120s linear infinite;
		transform: translateX(calc(-100% + 100vw));
	}

	@keyframes scroll-left {
		0% { 
			transform: translateX(0); 
		}
		100% { 
			transform: translateX(calc(-50% - 5px)); 
		}
	}

	@keyframes scroll-right {
		0% { 
			transform: translateX(calc(-100% + 100vw)); 
		}
		100% { 
			transform: translateX(calc(-50% + 100vw - 5px)); 
		}
	}

	/* Overlay styles */
	.overlay-container {
		position: absolute;
		inset: 0;
		z-index: 10;
		width: 100%;
		height: 100%;
	}

	.overlay-content {
		display: flex;
		width: 100%;
		height: 100%;
	}

	.blur-section {
		width: 80%;
		height: 100%;
		position: relative;
		background-color: transparent;
	}

	.blur-section::before {
		content: "";
		position: absolute;
		inset: 0;
		backdrop-filter: blur(200px);
		background-color: rgba(0, 0, 0, 0.2);
		mask-image: linear-gradient(to right, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0) 100%);
		-webkit-mask-image: linear-gradient(to right, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 0) 100%);
	}

	.clear-section {
		width: 20%;
		height: 100%;
	}

	/* Slot container */
	.slot-container {
		position: absolute;
		inset: 0;
		z-index: 20;
	}

	/* Performance optimizations */
	@media (prefers-reduced-motion: reduce) {
		.gallery-track {
			animation: none;
		}
	}

	/* Mobile optimizations */
	@media (max-width: 768px) {
		.gallery-item {
			width: 250px;
		}
		
		.blur-section {
			width: 85%;
		}
		
		.clear-section {
			width: 15%;
		}
	}
</style>
