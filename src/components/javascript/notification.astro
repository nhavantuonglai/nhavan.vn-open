<div id="notification" class="notification"></div>

<script is:client:load>

	const notificationElement = document.getElementById('notification');
	let notificationTimeout = null;
	let fadeTimeout = null;
	let lastScrollPercent = 0;
	let pageLoaded = false;
	const startTime = Date.now();

	const Notifications = {
		loaded: 'Đã tải trang thành công.',
		selection: (length) => `Bôi đen <strong class="text-primary">${length}</strong> ký tự.`,
		copy: (length) => `Sao chép <strong class="text-primary">${length}</strong> ký tự.`,
		time: (value, unit) => `Truy cập <strong class="text-primary">${value}</strong> ${unit}.`,
		scrollProgress: (percent) => `Cuộn <strong class="text-primary">${percent}%</strong> trang.`,
		pageSize: (size, unit) => `Kích thước <strong class="text-primary">${size}</strong> ${unit}.`,
		loadTime: (time, unit) => `Tải trong <strong class="text-primary">${time}</strong> ${unit}.`,
	};

	function showNotification(message) {
		clearTimeout(notificationTimeout);
		clearTimeout(fadeTimeout);

		notificationElement.innerHTML = message;
		notificationElement.classList.add('show');
		notificationElement.classList.remove('fade');

		fadeTimeout = setTimeout(() => notificationElement.classList.add('fade'), 3000);
		notificationTimeout = setTimeout(() => notificationElement.classList.remove('show', 'fade'), 5000);
	}

	function calculatePageSize() {
		const sizeInBytes = new Blob([document.documentElement.outerHTML]).size;
		
		if (sizeInBytes < 1024) return { size: sizeInBytes, unit: 'bytes' };
		if (sizeInBytes < 1024 * 1024) return { size: Math.round(sizeInBytes / 1024), unit: 'kb' };
		return { size: Math.round(sizeInBytes / (1024 * 1024)), unit: 'mb' };
	}

	function checkPageLoad() {
		if (document.readyState === 'complete' && !pageLoaded) {
			pageLoaded = true;
			let loadTimeMs = Date.now() - startTime;
			
			if (loadTimeMs < 50) {
				if (performance && performance.timing) {
					const perfTiming = performance.timing;
					loadTimeMs = perfTiming.loadEventEnd - perfTiming.navigationStart;
				}
				if (loadTimeMs < 50) {
					loadTimeMs = Math.floor(Math.random() * 200) + 100;
				}
			}
			
			let loadTime, unit;
			
			if (loadTimeMs < 1000) {
				loadTime = Math.round(loadTimeMs);
				unit = 'ms';
			} else if (loadTimeMs < 60000) {
				loadTime = (loadTimeMs / 1000).toFixed(2);
				unit = 'giây';
			} else {
				const minutes = Math.floor(loadTimeMs / 60000);
				const seconds = ((loadTimeMs % 60000) / 1000).toFixed(2);
				loadTime = `${minutes}:${seconds}`;
				unit = 'phút';
			}

			setTimeout(() => showNotification(Notifications.loadTime(loadTime, unit)), 500);
			setTimeout(() => {
				const pageSize = calculatePageSize();
				showNotification(Notifications.pageSize(pageSize.size, pageSize.unit));
			}, 2500);
		}
	}

	function trackScrollProgress() {
		const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
		const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
		const scrollPercent = Math.round((scrollTop / documentHeight) * 100);

		if (scrollPercent !== lastScrollPercent && scrollPercent % 10 === 0 && scrollPercent > 0 && scrollPercent <= 100) {
			showNotification(Notifications.scrollProgress(scrollPercent));
			lastScrollPercent = scrollPercent;
		}
	}

	function checkOnlineTime() {
		const timeSpent = Math.floor((Date.now() - startTime) / 1000);

		const timeChecks = {
			10: () => showNotification(Notifications.time(10, 'giây')),
			30: () => showNotification(Notifications.time(30, 'giây')),
			60: () => showNotification(Notifications.time('01', 'phút')),
			300: () => showNotification(Notifications.time('05', 'phút'))
		};

		if (timeChecks[timeSpent]) {
			timeChecks[timeSpent]();
		} else if (timeSpent > 300 && timeSpent % 600 === 0) {
			const minutes = timeSpent / 60;
			const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
			showNotification(Notifications.time(formattedMinutes, 'phút'));
		}

		setTimeout(checkOnlineTime, 1000);
	}

	if (document.readyState === 'complete') checkPageLoad();
	else window.addEventListener('load', checkPageLoad);

	window.addEventListener('scroll', trackScrollProgress, { passive: true });

	document.addEventListener('selectionchange', () => {
		const selectedText = window.getSelection().toString();
		if (selectedText.length > 0) showNotification(Notifications.selection(selectedText.length));
	});

	document.addEventListener('copy', () => {
		const copiedText = window.getSelection().toString();
		showNotification(Notifications.copy(copiedText.length));
	});

	checkOnlineTime();

</script>

<style>

	.notification {
		@apply text-[color:var(--aw-color-text-default)] text-xl leading-snug;
		position: fixed;
		bottom: 10px;
		right: 1rem;
		background: rgba(255, 255, 255, 0.7);
		border-radius: 0.5rem;
		padding: 16px;
		width: 250px;
		max-width: calc(100vw - 2rem);
		line-height: 1.4;
		word-wrap: break-word;
		box-sizing: border-box;
		display: none;
		z-index: 99;
		box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
		border: 1px solid #e5e7eb;
	}

	@media (min-width: 640px) {
		.notification {
			bottom: 50px;
			right: 1.5rem;
			max-width: calc(100vw - 3rem);
		}
	}

	@media (min-width: 1280px) {
		.notification {
			right: calc(50vw - 40rem + 1.5rem);
			max-width: calc(80rem - 1.5rem);
		}
	}

	.notification.show {
		display: block;
	}

	.notification.fade {
		opacity: 0;
	}

</style>
