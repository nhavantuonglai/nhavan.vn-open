---
import CommonImage from '~/components/common/image.astro';
import Button from '~/components/ui/button.astro';

export interface Props {
	title?: string;
	subtitle?: string;
	content?: string;
	image?: string | { src: string; alt?: string; title?: string };
	id?: string;
	channels?: Array<{ name: string; url: string; country?: string }>;
}

const {
	title = await Astro.slots.render('title'),
	subtitle = await Astro.slots.render('subtitle'),
	content = await Astro.slots.render('content'),
	image,
	id = 'default',
	channels = [],
} = Astro.props;

const imageProps = typeof image === 'string'
	? { src: image, alt: 'Diễn đàn viết lách nhà văn tương lai.', title: 'Diễn đàn viết lách nhà văn tương lai.' }
	: image;

const safe = id.replace(/[^a-zA-Z0-9_-]/g, '');
const classes = {
	container: 'w-full text-justify text-lg rounded-lg mb-6',
	output: 'w-full text-justify',
};
---

<section class="relative w-full h-screen not-prose">
	<div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>

	<div class="relative max-w-7xl mx-auto px-4 sm:px-6">
		<div class="pt-0 md:pt-[120px] pointer-events-none"></div>
		<div class="py-12 md:py-20 grid gap-6 md:grid-cols-2 max-w-full">
			<div class="pb-10 md:pb-16 mx-auto lg:mx-0 w-full">
				{title && (
					<h1 class="text-white" set:html={title} />
				)}

				<div class="w-full max-w-3xl mx-auto">
					{subtitle && (
						<p class="text-white mb-6" set:html={subtitle} />
					)}

					<div class={classes.container}>
						{channels.length > 0 ? (
							<div id={`${safe}-audio-output`} class={classes.output}>
								<audio id={`${safe}-audio-player`} class="hidden">
									<source id={`${safe}-audio-source`} src="" type="audio/mpeg" />
								</audio>
								<div id={`${safe}-status`} class="text-white"></div>
							</div>
						) : (
							<h1 id={`${safe}-text-output`} class={`${classes.output} text-white`}></h1>
						)}

						{content && <Fragment set:html={content} />}
					</div>
				</div>
			</div>

			{channels.length > 0 ? (
				<div class="pb-10 md:pb-16 mx-auto lg:mx-0 w-full">
					<div class="relative m-auto max-w-5xl">
						<div id={`${safe}-buttons`} class="flex flex-wrap justify-between gap-2">
							{channels.map((channel, index) => (
								<Button
									class={`px-4 py-2 font-medium leading-6 text-center transition-colors ${index % 2 === 0 ? 'mr-auto' : 'ml-auto'}`}
									data-url={channel.url}
									data-index={index}
								>
									{channel.name}
								</Button>
							))}
						</div>
					</div>
				</div>
			) : imageProps && (
				<div class="pb-10 md:pb-16 mx-auto lg:mx-0 w-full">
					<div class="relative m-auto max-w-5xl">
						<CommonImage
							src={imageProps.src}
							alt={imageProps.alt}
							title={imageProps.title}
							loading="eager"
						/>
					</div>
				</div>
			)}

		</div>
	</div>
</section>

<script>

	document.addEventListener('DOMContentLoaded', function () {
		const heroReadyEvent = new CustomEvent('heroReady');
		document.dispatchEvent(heroReadyEvent);
		const heroSection = document.querySelector('section');

		if (heroSection) {
			const observer = new IntersectionObserver(
				(entries) => {
					entries.forEach((entry) => {
						if (entry.isIntersecting) {
							const galleryImages = document.getElementById('gallery-images');
							if (galleryImages) {
								galleryImages.style.opacity = '1';
							}
							observer.unobserve(entry.target);
						}
					});
				},
				{ threshold: 0.1 }
			);
			observer.observe(heroSection);
		}

		const output = document.getElementById(`${safe}-text-output`) || document.getElementById(`${safe}-status`);
		if (output) {
			const observer = new MutationObserver(() => {
				const title = output.textContent || '';
				document.title = title ? `${title} | nhavantuonglai` : 'Nhà văn tương lai';
			});
			observer.observe(output, { childList: true, characterData: true, subtree: true });
		}
	});

</script>